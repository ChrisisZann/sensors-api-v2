// package repository

// import (
// 	"fmt"
// 	"log"
// )

// func (thisRepo *testRepository) CreateNewSensor(sId int, sType, sName, sDescription string) error {

// 	query := `INSERT INTO home.sensors(sensor_id, sensor_type, sensor_name, description) VALUES ($1,$2,$3,$4);`

// 	res, err := thisRepo.DB.Exec(query, sId, sType, sName, sDescription)
// 	if err != nil {
// 		log.Fatal("CreateNewSensor error: ", err)
// 	}
// 	fmt.Println("CreateNewSensor result: ", res)
// 	return nil
// }

// func (thisRepo *testRepository) InsertSensorData(sId int, sValue string) error {

// 	query := `INSERT INTO home.sensor(sensor_id, sensor_value) VALUES ($1,$2);`

// 	// Execute the SQL query
// 	res, err := thisRepo.DB.Exec(query, sId, sValue)
// 	if err != nil {
// 		log.Fatal("insertSensorData error: ", err)
// 	}
// 	fmt.Println("insertSensorData result: ", res)
// 	return err
// }

// func (thisRepo *testRepository) SelectAllSensors() ([]*Sensors, error) {

// 	query := `SELECT * FROM home.sensors`

// 	// Execute the SQL query
// 	rows, err := thisRepo.DB.Query(query)
// 	if err != nil {
// 		log.Fatal("insertSensorData error: ", err)
// 	}
// 	fmt.Println("insertSensorData result: ", rows)

// 	return nil, nil
// }

// func (thisRepo *testRepository) GetSensorLatestValue(sId int) (Sensor, error) {

// 	query := `SELECT *FROM home.sensor WHERE sensor_id=$1;`

// 	rows, err := thisRepo.DB.Query(query, sId)
// 	if err != nil {
// 		log.Println("Error in: SelectAllSensors()", err)
// 	}
// 	// fmt.Println("rows: ", rows)
// 	defer rows.Close()

// 	var sensor Sensor

// 	var sensorData Sensor
// 	err = rows.Scan(
// 		&sensorData.Sensor_id,
// 		&sensorData.Sensor_value,
// 		&sensorData.Sys_creation_date,
// 	)
// 	if err != nil {
// 		return sensor, err
// 	}

// 	return sensor, nil
// }